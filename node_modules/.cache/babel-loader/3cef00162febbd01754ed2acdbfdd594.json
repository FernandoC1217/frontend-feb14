{"ast":null,"code":"// import axios from \"axios\";\nimport api from \"../API/index\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport cogoToast from \"cogo-toast\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  api.postRegister(userData).then(res => {\n    history.push(\"/dashboard\");\n    cogoToast.success(\"Gracias por registrarse\");\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err\n    });\n    cogoToast.error('Error al registrase. Verifica los campos ');\n  });\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  api.postLogin(userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n    cogoToast.success(\"Inicio de sesión exitoso\");\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["D:/Users/kirby/OneDrive/Documents/Escritorio/Fernando Carpeta/Universidad/DEVF/cintaroja/ProyectoFinal/frontend/src/actions/authActions.js"],"names":["api","setAuthToken","jwt_decode","cogoToast","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","postRegister","then","res","push","success","catch","err","type","payload","error","loginUser","postLogin","token","data","localStorage","setItem","decoded","setCurrentUser","response","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA;AACA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DV,EAAAA,GAAG,CACAW,YADH,CACgBH,QADhB,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACXJ,IAAAA,OAAO,CAACK,IAAR,CAAa,YAAb;AACAX,IAAAA,SAAS,CAACY,OAAV,CAAkB,yBAAlB;AACD,GALH,EAMGC,KANH,CAMSC,GAAG,IACR;AAACP,IAAAA,QAAQ,CAAC;AACRQ,MAAAA,IAAI,EAAEd,UADE;AAERe,MAAAA,OAAO,EAAEF;AAFD,KAAD,CAAR;AAIDd,IAAAA,SAAS,CAACiB,KAAV,CAAgB,2CAAhB;AACD,GAZH;AAcD,CAfM,C,CAiBP;;AACA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;AAC/CV,EAAAA,GAAG,CACAsB,SADH,CACad,QADb,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AAEA;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAYV,GAAG,CAACW,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EALW,CAMX;;AACAtB,IAAAA,YAAY,CAACsB,KAAD,CAAZ,CAPW,CAQX;;AACA,UAAMI,OAAO,GAAGzB,UAAU,CAACqB,KAAD,CAA1B,CATW,CAUX;;AACAb,IAAAA,QAAQ,CAACkB,cAAc,CAACD,OAAD,CAAf,CAAR;AACAxB,IAAAA,SAAS,CAACY,OAAV,CAAkB,0BAAlB;AACD,GAfH,EAgBGC,KAhBH,CAgBSC,GAAG,IACRP,QAAQ,CAAC;AACPQ,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACY,QAAJ,CAAaL;AAFf,GAAD,CAjBZ;AAsBD,CAvBM,C,CAyBP;;AACA,OAAO,MAAMI,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLT,IAAAA,IAAI,EAAEb,gBADD;AAELc,IAAAA,OAAO,EAAEQ;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMG,cAAc,GAAG,MAAM;AAClC,SAAO;AACLZ,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMyB,UAAU,GAAG,MAAMrB,QAAQ,IAAI;AAC1C;AACAe,EAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA/B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAS,EAAAA,QAAQ,CAACkB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["// import axios from \"axios\";\r\nimport api from \"../API/index\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport cogoToast from \"cogo-toast\"\r\n\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\r\n\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  api\r\n    .postRegister(userData)\r\n    .then(res => {\r\n      history.push(\"/dashboard\");\r\n      cogoToast.success(\"Gracias por registrarse\");\r\n    })\r\n    .catch(err =>\r\n      {dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err\r\n      }) \r\n      cogoToast.error('Error al registrase. Verifica los campos ');\r\n    }\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  api\r\n    .postLogin(userData)\r\n    .then(res => {\r\n      // Save to localStorage\r\n\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n      cogoToast.success(\"Inicio de sesión exitoso\");\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}